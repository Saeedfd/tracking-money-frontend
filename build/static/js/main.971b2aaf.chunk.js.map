{"version":3,"sources":["logo.svg","wallet.js","navbar.js","walletCard.js","walletInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wallet","className","Button","variant","size","block","navbox","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","roundedCircle","Image","src","WalletCard","Table","striped","bordered","hover","colSpan","Card","style","width","Img","Body","Title","Text","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,6HCgC5BC,EA1BD,WAWd,OACC,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,KAAKC,OAAK,GAAtC,UACA,yBAAKJ,UAAU,2BACf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,KACA,kBAACD,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,QACC,kBAACD,EAAA,EAAD,CAAQC,QAAQ,kBAAhB,Q,gDCaSG,EA/BD,WAEZ,OACE,6BACA,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,oBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBACnB,kBAACC,EAAA,EAAD,CAAKf,UAAU,WACb,kBAACe,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACA,kBAACO,EAAA,EAAD,CAAaC,MAAM,WAAWJ,GAAG,sBAC/B,kBAACG,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,UACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,kBACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,aACA,kBAACO,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,oBAGJ,kBAACW,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASzB,UAAU,YACxD,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBwB,eAAa,GAA/C,UACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,eAAeF,eAAa,S,QCchCG,EApCG,WAEhB,OACC,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC/B,QAAQ,QACvC,+BACE,4BACE,iCACA,uCACA,2CACA,uCAGJ,+BACE,4BACE,iCACA,qCACA,kDACA,oCAEF,4BACE,iCACA,oCACA,yCACA,qCAEF,4BACE,iCACA,wBAAIgC,QAAQ,KAAZ,iBACA,wC,QCTSL,EAnBG,WAEhB,OACE,yBAAK7B,UAAU,cACb,kBAACmC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACtB,kBAACF,EAAA,EAAKG,IAAN,CAAUpC,QAAQ,MAAM0B,IAAI,eAC5B,kBAACO,EAAA,EAAKI,KAAN,KACA,kBAACJ,EAAA,EAAKK,MAAN,sBACA,kBAACL,EAAA,EAAKM,KAAN,6CAGA,kBAACxC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,oBCSSwC,G,YAfJ,WACT,OACE,yBAAK1C,UAAU,OACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,kBAAC,EAAD,MACH,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRa2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.971b2aaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './wallet.css';\nimport { Button} from 'react-bootstrap';\n\n\n\nconst Wallet =() => {\n// const Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  // background: ${props => props.primary ? \"palevioletred\" : \"white\"};\n  // color: ${props => props.primary ? \"white\" : \"palevioletred\"};\n//   font-size: 1em;\n//   margin: 1em;\n//   padding: 0.25em 1em;\n//   border: 2px solid palevioletred;\n//   border-radius: 3px;\n// `;\nreturn(\n\t<div className=\"container\">\n\t    <Button variant=\"info\" size=\"lg\" block>Wallet</Button>\n\t    <div className=\"container walletSetting\">\n\t  \t\t<Button variant=\"outline-warning\">+</Button>\n\t  \t\t<Button variant=\"outline-secondary\">edit</Button>\n\t   \t\t<Button variant=\"outline-danger\">-</Button>\n\t   \t</div>\n  \t</div>\n);\n}\n\n\n\n\nexport default Wallet;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Navbar, Button, NavDropdown,Nav,Form,FormControl,Col,Image  } from 'react-bootstrap';\n\n\nconst navbox =() => {\n\n  return (\n    <div>\n   \t<Navbar bg=\"light\" expand=\"lg\">\n  \t<Navbar.Brand href=\"#home\">Track your money</Navbar.Brand>\n  \t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  \t<Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#link\">Link</Nav.Link>\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\" roundedCircle>Search</Button>\n      \t\t<Image src=\"./dollar.png\" roundedCircle />\n    </Form>\n  \t</Navbar.Collapse>\n\t</Navbar>\n    </div>\n  );\n}\n\n\nexport default navbox;\n","import React from 'react';\nimport { Table} from 'react-bootstrap';\nimport  './wallet.css';\n\n\nconst WalletCard =() => {\n\n  return (\n   <Table striped bordered hover variant=\"dark\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>Expense</th>\n      <th>Description</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>bread</td>\n      <td> for the breakfast</td>\n      <td>20$</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>rent</td>\n      <td>home rent</td>\n      <td>360$</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td colSpan=\"2\">Total Expense</td>\n      <td>380$</td>\n    </tr>\n  </tbody>\n</Table>\n  );\n}\n\n\nexport default WalletCard;\n","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport  './wallet.css';\n\n\nconst WalletCard =() => {\n\n  return (\n    <div className=\"WalletCard\">\n      <Card style={{ width: '18rem' }}>\n      <Card.Img variant=\"top\" src='./logo.svg' />\n      <Card.Body>\n      <Card.Title>Total balance</Card.Title>\n      <Card.Text>\n     total balance of this month is: 200$\n      </Card.Text>\n      <Button variant=\"primary\">Go somewhere</Button>\n      </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\n\nexport default WalletCard;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Wallet from './wallet';\nimport Navbar from './navbar.js';\nimport WalletCard from './walletCard.js';\nimport WalletInfo from './walletInfo.js';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App= ()=> {\n  return (\n    <div className=\"App\">\n       <Navbar></Navbar>\n       <Wallet></Wallet>\n       <Wallet></Wallet>\n          <Wallet></Wallet>\n       <WalletInfo></WalletInfo>\n       <WalletInfo></WalletInfo>\n       <WalletInfo></WalletInfo>\n       <WalletCard></WalletCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}